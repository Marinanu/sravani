# -*- coding: utf-8 -*-
"""Project Car Feature Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cI_OH16B64LRZeP5wNMD8yLtIdNP5--m
"""

# importing necessary libraries

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import zscore
import warnings
warnings.filterwarnings( "ignore")

from google.colab import drive
drive.mount('/content/drive')

# loading the data

path = "/content/drive/MyDrive/CarFeatures.csv"
df_car = pd.read_csv(path)
df_car.head(5)

"""# Q1. Perform EDA on the given dataset.

"""

#finding the shape
df_car.shape

#viewing columns
df_car.columns

"""Tis data has 18 columns and 25 observations."""

#Duplicateda
df_car.duplicated().sum()

"""Hence we confirm that there are no duplicates."""

df_car.info()

# No null values in data
# There 8 categorical variables and 10 numerical variables in the data set.

df_car_num = df_car.select_dtypes(['float64','int64'])
df_car_cat = df_car.select_dtypes(['object'])
df_car_cat

"""**Univariate analysis**"""

#Distribution plots for numerical variables
plt.figure(figsize= (10,8))
feature_list = df_car_num.columns
for i in range(len(feature_list)):
  plt.subplot(4,3,i+1)
  sns.distplot(df_car_num[feature_list[i]])
plt.show()

plt.figure(figsize= (10,8))
feature_list = df_car_num.columns
for i in range(len(feature_list)):
  plt.subplot(4,3,i+1)
  sns.distplot(df_car_num[feature_list[i]], kde = True, bins = 20)
plt.show()

# Check for outliers
plt.figure(figsize= (10,10))
feature_list = df_car_num.columns
for i in range(len(feature_list)):
  plt.subplot(4,3,i+1)
  sns.boxplot(df_car_num[feature_list[i]])
  plt.title("Box plot of" + feature_list[i])
  plt.tight_layout()
plt.show()

"""There are no outliers present."""

# Categorical columns
plt.figure(figsize= (10,10))
feature_list = df_car_cat.columns
for i in range(len(feature_list)):
  plt.subplot(4,3,i+1)
  sns.countplot(df_car_cat[feature_list[i]])
  plt.tight_layout()
plt.show()

"""**Bivariate analysis**"""

df_car.corr(method='pearson')
sns.heatmap(df_car.corr(method='pearson'), annot = True, fmt = '.2f')
plt.show()

# Correlation values near 1/-1 are highly positively correlated or highly negatively correlated to each other.

sns.pairplot(df_car)

# Multy colliniarity is an important issue which might affect your model
# Using Heatmap and pairplot we can identify the relationship between the variables

"""# Q2.Summarize the data using descriptive statistics."""

df_car.describe().T

# Wheel base: Min is 91.7 and max is 119.6

df_car_cat.describe().T

# There are total 10 Makes of the car

"""# Q3. Identify the costliest car and the cheapest car by average price.

"""

temp = df_car.groupby(['Make'], as_index = False).mean().sort_values(by = 'Price', ascending = False)

plt.figure(figsize= (8,5))
sns.barplot(data = temp, x='Make', y ='Price')

# By average price, the costliest car is Chervolet and the cheapest car is Ford.

"""# Q4.Which fuel type car has the highest average price?

"""

temp = df_car.groupby(['Fuel Type'], as_index = False).mean().sort_values(by = 'Price', ascending = False)

plt.figure(figsize= (3,3))
sns.barplot(data = temp, x='Fuel Type', y ='Price')

#Gas type cars have highest average prices than Diesel cars.

"""# Q5. For the given dataset, construct the following contingency table (take make as row variable)

"""

pd.crosstab(df_car['Make'], df_car['Fuel Type'])

pd.crosstab(df_car['Make'], df_car['Body Style'])

"""# Q6. What is the probability that a randomly selected car will be a BMW?


"""

df_car['Make'].value_counts()

#df_car['Make'].value_counts()['BMW']- Total no of BMW cars
#df_car['Make'].value_counts().sum()- Total no of cars
df_car['Make'].value_counts()['BMW']/df_car['Make'].value_counts().sum()

"""# Q7.What is the probability that a randomly selected car will be an Audi?

"""



df_car_gas = df_car[df_car['Fuel Type'] == 'Gas']['Price']
df_car_diesel = df_car[df_car['Fuel Type'] == 'Diesel']['Price']
df_car_diesel

len(df_car_gas)

len(df_car_diesel)

# Both of them having total no of data < 30, Here we choose sample t-test for testing the above hypothesis.
# Alpha = 0.05

import scipy.stats as stats
t_st , p = stats.ttest_ind(df_car_gas, df_car_diesel)
p

# Hence p > Alpha, we fail to reject the NULL Hypothesis, We accept 'H0'

"""Therefor we can confirm that there is no difference in average price of gas type car and deisel car.

# Q8.Form the null and alternate hypothesis to test whether the price of Gas cars is significantly different from that of Diesel  Cars
"""

# Null Hypothesis: There is no difference between the average price of Car ype gas and diesel car
# Alternate Hypothesis: There is a difference between the average price of Car ype gas and diesel car
# H0: mu(gas)- mu(diesel) = 0
# H1: mu(gas)- mu(diesel) != 0

"""#Q9. Find the p-value. At 0.05 level of significance, is the price of gas cars significantly different from that of diesel cars?"""

df_car_gas = df_car[df_car['Fuel Type']== 'Gas']['Price']
df_car_diesel = df_car[df_car['Fuel Type']== 'Diesel']['Price']
df_car_gas

df_car_diesel

len(df_car_diesel)

len(df_car_gas)

#length of the two data sets are > 30, so we choose 2 sample t test for for the above hypothesis
# alpha = 0.05

import scipy.stats as stats
t_st, p = stats.ttest_ind(df_car_gas,df_car_diesel)
p

# As p > alpha, failed to reject the Null hypothesis

"""Hence we can say that there is no significant difference between gas and diesel type cars.

# Q10. Suppose you randomly select a car from this dataset. What is the probability that it is a 'Luxury Car' ?
"""

total = df_car['Make'].value_counts().sum()

sele = df_car[(df_car['Make'] == 'BMW') | (df_car['Make'] == 'Audi')|(df_car['Make'] == 'Mercedes')]
len(sele)/total

# The probability of selecting a luxury car when we randomly select a car fro this data set is '0.4'

"""# Q11. You want to select a subset of three unique cars from the dataset to participate in a race. How many different ways can you arrange the cars in the race, considering their 'Make' as the criteria?

"""

import itertools
car_makes = list(df_car['Make'].unique())
No_car_select =3

itertools.permutations(car_makes,No_car_select)

list(itertools.permutations(car_makes,No_car_select))

len(list(itertools.permutations(car_makes,No_car_select)))

# We can arrange the cars in the race, considering their 'Make' as the criteria in '720' different ways.

"""# Q12. If you randomly pick a car with 8 cylinders, what is the probability that BMW?"""

comb = pd.crosstab(index = df_car['Make'], columns = df_car['Number of Cylinders'], margins = True)

comb

#No_of BMW_8_cyl cars/ No of 8_cyl cars
comb.iloc[1,0]/comb.iloc[10,0]

# the probability that BMW when randomly pick a car with 8 cylinders is '0.4'

"""# Q13. You are conducting a random survey by selecting 7 cars from the dataset. Calculate the probability that exactly 3 out of the 7 selected cars have 'Turbo' aspiration."""

df_car['Aspiration'].value_counts()

df_car[df_car['Aspiration'] == 'Turbo'].shape

tot_turbo = df_car['Aspiration'].value_counts()['Turbo']
total = df_car['Aspiration'].value_counts().sum()

p_turbo = tot_turbo/total
p_turbo

# the probability that exactly 3 out of the 7 selected cars have 'Turbo' aspiration is '0.44'